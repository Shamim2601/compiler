Line 1: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

i

Line 3: declaration_list : declaration_list COMMA ID

i,j

Line 3: declaration_list : declaration_list COMMA ID

i,j,k

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k;

Line 3: statement : var_declaration

int i,j,k;


Line 3: statements : statement

int i,j,k;


Line 5: variable : ID

i

Line 5: factor	: CONST_INT

3

Line 5: unary_expression	: factor

3

Line 5: term : unary_expression

3

Line 5: simple_expression : term

3

Line 5: rel_expression	: simple_expression

3

Line 5: logic_expression : rel_expression

3

Line 5: expression : variable ASSIGNOP logic_expression

i=3

Line 5: expression_statement : expression SEMICOLON

i=3;

Line 5: statement : expression_statement

i=3;


Line 5: statements : statements statement

int i,j,k;
i=3;


Line 6: variable : ID

j

Line 6: factor	: CONST_INT

8

Line 6: unary_expression	: factor

8

Line 6: term : unary_expression

8

Line 6: simple_expression : term

8

Line 6: rel_expression	: simple_expression

8

Line 6: logic_expression : rel_expression

8

Line 6: expression : variable ASSIGNOP logic_expression

j=8

Line 6: expression_statement : expression SEMICOLON

j=8;

Line 6: statement : expression_statement

j=8;


Line 6: statements : statements statement

int i,j,k;
i=3;
j=8;


Line 7: variable : ID

k

Line 7: factor	: CONST_INT

6

Line 7: unary_expression	: factor

6

Line 7: term : unary_expression

6

Line 7: simple_expression : term

6

Line 7: rel_expression	: simple_expression

6

Line 7: logic_expression : rel_expression

6

Line 7: expression : variable ASSIGNOP logic_expression

k=6

Line 7: expression_statement : expression SEMICOLON

k=6;

Line 7: statement : expression_statement

k=6;


Line 7: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;


Line 10: variable : ID

i

Line 10: factor	: variable

i

Line 10: unary_expression	: factor

i

Line 10: term : unary_expression

i

Line 10: simple_expression : term

i

Line 10: factor	: CONST_INT

3

Line 10: unary_expression	: factor

3

Line 10: term : unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression RELOP simple_expression

i==3

Line 10: logic_expression : rel_expression

i==3

Line 10: expression : logic_expression

i==3

Line 11: variable : ID

j

Line 11: factor	: variable

j

Line 11: unary_expression	: factor

j

Line 11: term : unary_expression

j

Line 11: simple_expression : term

j

Line 11: rel_expression	: simple_expression

j

Line 11: logic_expression : rel_expression

j

Line 11: argument_list : logic_expression

j

Line 11: argument_list : arguments

j

Line 11: factor : ID LPAREN argument_list RPAREN

println(j)

Line 11: unary_expression	: factor

println(j)

Line 11: term : unary_expression

println(j)

Line 11: simple_expression : term

println(j)

Line 11: rel_expression	: simple_expression

println(j)

Line 11: logic_expression : rel_expression

println(j)

Line 11: expression : logic_expression

println(j)

Line 11: expression_statement : expression SEMICOLON

println(j);

Line 11: statement : expression_statement

println(j);


Line 11: statements : statement

println(j);


Line 12: compound_statement : LCURL statements RCURL

{println(j);
}

Scopetable #1.1

Scopetable #1
0 -->> < i : ID >
1 -->> < j : ID >
2 -->> < k : ID >

Line 12: statement : compound_statement

{
println(j);
}


Line 17: statement : IF LPAREN expression RPAREN statement

if(i==3){
println(j);
}


Line 17: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}


Line 17: factor	: CONST_INT

0

Line 17: unary_expression	: factor

0

Line 17: term : unary_expression

0

Line 17: simple_expression : term

0

Line 17: rel_expression	: simple_expression

0

Line 17: logic_expression : rel_expression

0

Line 17: expression : logic_expression

0

Line 17: statement : RETURN expression SEMICOLON

return 0;

Line 17: statements : statements statement

int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}
return 0;


Line 18: compound_statement : LCURL statements RCURL

{int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}
return 0;
}

Scopetable #1.2

Scopetable #1
0 -->> < i : ID >
1 -->> < j : ID >
2 -->> < k : ID >

Line 18: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}
return 0;
}


Line 18: unit : func_definition

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}
return 0;
}


Line 18: program : unit

int main(){
int i,j,k;
i=3;
j=8;
k=6;
if(i==3){
println(j);
}
return 0;
}


Line 20: start : program

Scopetable #1
0 -->> < i : ID >
1 -->> < j : ID >
2 -->> < k : ID >
5 -->> < main : ID >

Total lines: 20
Total errors: 0
